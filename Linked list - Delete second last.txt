Linked list - Delete second last 1

Write a Program to delete the second last element from the list. If deletion of second last element is not possible, print "Deletion of second last element is not possible", Otherwise print the list after deleting the second last element.

Input Format

Read elements upto -1

Constraints

1<=n<=10^7

Output Format

print output

Sample Input 0

1
2
3
4
-1
Sample Output 0

Before deleting:
1 2 3 4
After deleting:
1 2 4
Sample Input 1

23
34
55
12
66
45
33
-1
Sample Output 1

Before deleting:
23 34 55 12 66 45 33
After deleting:
23 34 55 12 66 33

PROGRAM CODE:

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class linkedlist:
    def __init__(self):
        self.head=self.tail=None
    def create(self,data):
        n=Node(data)
        if self.head==None:
            self.head=self.tail=n
        else:
            self.tail.next=n
            self.tail=n
    def show(self):
        temp=self.head
        while (temp!=None):
            print(temp.data,end=" ")
            temp=temp.next
    def delete(self):
        if self.head==None:
            print("Deletion of second last element is not possible")
        else:
            temp1=self.head
            temp2=self.head
            while (temp1.next.next!=None):
                temp2=temp1
                temp1=temp1.next
            temp2.next=temp1.next
s=linkedlist()
while True:
    data=int(input())
    if data==-1:
        break
    else:
        s.create(data)
print("Before deleting:")
s.show()
s.delete()
print("\nAfter deleting:")
s.show()
            